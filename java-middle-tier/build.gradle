import org.gradle.internal.os.OperatingSystem;
import org.apache.tools.ant.filters.ReplaceTokens;

plugins {
  id 'org.springframework.boot' version '2.2.2.RELEASE'
  id 'io.spring.dependency-management' version '1.0.8.RELEASE'
  id 'java'
}

group = 'com.marklogic.pipes'
sourceCompatibility = '1.8'

repositories {
  jcenter()
  maven { url 'https://jitpack.io' }
}

ext {
	set('springCloudVersion', "Hoxton.RELEASE")
}

dependencies {
  implementation 'com.github.everit-org.json-schema:org.everit.json.schema:1.12.1'
  implementation 'org.apache.httpcomponents:httpclient:4.5.10'

  implementation 'com.marklogic:ml-app-deployer:3.17.0'
  implementation 'com.marklogic:marklogic-data-hub:5.2.0'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.session:spring-session-core'
	implementation 'commons-io:commons-io:2.5'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    exclude group: "com.vaadin.external.google", module:"android-json"
	}
  testCompile group: 'org.springframework.security', name: 'spring-security-test', version: '5.3.0.RELEASE'
  annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()

 testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

task copyLiteGraphOverride(type: Copy) {
  doFirst {
    logger.warn('Copying "node_modules_override/litegraph.js"')
  }
  from "../node_modules_override/litegraph.js"
  into "../node_modules/litegraph.js/build/"
  doLast {
    logger.warn('Done copying "node_modules_override/litegraph.js"')
  }
}

task runQuasarBuild(type:Exec) {
  dependsOn copyLiteGraphOverride
  mustRunAfter copyLiteGraphOverride
  doFirst {
    logger.warn('Running quasar build')
  }
  workingDir '..'

  def env = OperatingSystem.current()
  if (env.isWindows()) {
    commandLine 'cmd', '/c', 'quasar build'
  } else {
    executable "quasar"
    args 'build','--modern'
  }

  doLast {
    logger.warn('Done running quasar build')
  }
}

task copyQuasarBuild(type:Copy) {
  dependsOn runQuasarBuild
  mustRunAfter runQuasarBuild

  doFirst {
    logger.warn('Copying "dist/spa"')
  }
  from "../dist/spa/"
  into "src/main/resources/static/"
  outputs.upToDateWhen {
    false
  }
  doLast {
    logger.warn('Done copying "dist/spa"')
  }
}

task copyDhf(type:Copy) {
  doFirst {
    logger.warn('Copying ml-backend/src/')
  }

  from "../ml-backend/src/"
  into "src/main/resources/dhf/src/"
  doLast {
    logger.warn('Done copying ml-backend/src')
  }
}

task getVersion(type: Exec) {
    def env = OperatingSystem.current()
  if (env.isWindows()) {
    commandLine 'git', 'describe', '--tags'
  } else {
    executable "git"
    args 'describe', '--tags'
  }
    standardOutput = new ByteArrayOutputStream()
    ext.value = {standardOutput.toString().replaceAll("\\s", "")}
}

task getBuild(type: Exec) {
    def env = OperatingSystem.current()
     if (env.isWindows()) {
    commandLine 'git','rev-parse','--verify','--short','HEAD'
  } else {
    executable "git"
    args 'rev-parse','--verify','--short','HEAD'
  }
    standardOutput = new ByteArrayOutputStream()
    ext.value = {standardOutput.toString().replaceAll("\\s", "")}
}

task addVersionToBackend(type:Copy) {
    dependsOn getBuild
    dependsOn getVersion

    from "../ml-backend/src/main/ml-modules/services/vppBackendServices.sjs"
    into "../java-middle-tier/src/main/resources/dhf/src/main/ml-modules/services/"

    eachFile {
        filter(ReplaceTokens, tokens: [
            PIPESVERSIONTOKEN: tasks.getVersion.value(),
            PIPESBUILDTOKEN: tasks.getBuild.value()
        ])
    }
}

bootJar {
  baseName = 'marklogic-pipes'
  dependsOn copyQuasarBuild
  dependsOn copyDhf
  dependsOn addVersionToBackend
  mustRunAfter copyQuasarBuild

}

task runQuasarDev(type:Exec) {
  dependsOn copyLiteGraphOverride
  mustRunAfter copyLiteGraphOverride
  doFirst {
    logger.warn('Running quasar dev')
  }
  workingDir '..'

  def env = OperatingSystem.current()
  if (env.isWindows()) {
    commandLine 'cmd', '/c', 'quasar dev;'
  } else {
    executable "quasar"
    args "dev", "--modern"
  }

  doLast {
    logger.warn('Done running quasar dev')
  }
}

task runLocal(type: JavaExec) {
  group = "Execution"
  description = "Run the main class with JavaExecTask"
  classpath = sourceSets.main.runtimeClasspath
  main = "com.marklogic.pipes.ui.Application"
}

task buildPipes {
  dependsOn bootJar
}
