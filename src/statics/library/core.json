[
  {
    "functionName": "hashNode",
    "blockName": "hashNode",
    "library": "Generate",
    "title": "Create Hash",
    "description": "Hashes the contents of a document to produce a unique fingerprint",
    "inputs": [
      {
        "name": "node",
        "type": null,
        "mandatory": true,
        "description": ""
      }
    ],
    "outputs": [
      {
        "name": "hash",
        "type": null,
        "mandatory": true,
        "description": ""
      }
    ],
    "widgets": [
      {
        "type": "combo",
        "name": "hash function",
        "default": "hash64",
        "values": [
          "hash64",
          "sha1",
          "sha256",
          "sha512"
        ]
      }
    ],
    "properties": [],
    "function": {
      "ref": "fn.doc",
      "code": null
    }
  },
  {
    "functionName": "multiConstant",
    "blockName": "multiConstant",
    "title": "Constant",
    "description": "Provides a constant",
    "library": "Generate",
    "widgets": [
      {
        "type": "combo",
        "name": "Type",
        "default": "string",
        "values": [
          "string",
          "number",
          "NULL"
        ],
        "callback": "let cval = this.widgets[1].value; if (v == 'number' && isNaN(this.widgets[1].value)) this.widgets[1].value = 0;if (v == 'NULL') this.widgets[1].value = ''"
      },
      {
        "type": "text",
        "name": "constant",
        "default": ""
      }
    ],
    "inputs": [],
    "outputs": [
      {
        "name": "output",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }
  },
  {
    "functionName": "stringPadding",
    "blockName": "stringPadding",
    "title": "Padding",
    "description": "Pads a string out using specified character",
    "library": "Format",
    "widgets": [
      {
        "type": "text",
        "name": "Length",
        "default": "10",
        "callback": "let sVal = this.widgets[0].value; let n = Math.floor(Number(sVal));if (!( n !== Infinity && String(n) === sVal && n >= 0 )) { sVal ='0' }; this.widgets[0].value = sVal"
      },
      {
        "type": "combo",
        "name": "Padding Direction",
        "values": [
          "left",
          "right"
        ],
        "default": "left"
      },
      {
        "type": "text",
        "name": "Padding Character",
        "default": ""
      }
    ],
    "inputs": [
      {
        "name": "input",
        "type": "xs:string"
      }
    ],
    "outputs": [
      {
        "name": "output",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }
  },
  {
    "functionName": "stringCase",
    "blockName": "stringCase",
    "title": "String Case",
    "description": "Changes the case of a string",
    "library": "Transform",
    "widgets": [
      {
        "type": "combo",
        "name": "stringOperation",
        "default": "lowercase",
        "values": [
          "lowercase",
          "UPPERCASE",
          "Capitalise"
        ]
      }
    ],
    "inputs": [
      {
        "name": "input",
        "type": "xs:string"
      }
    ],
    "outputs": [
      {
        "name": "output",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }
  },
  {
    "functionName": "Templating",
    "blockName": "Templating",
    "title": "String Template",
    "library": "Generate",
    "description": "Applies values to a template to generate a string",
    "inputs": [
      {
        "name": "v1",
        "type": null,
        "mandatory": false,
        "description": ""
      },
      {
        "name": "v2",
        "type": null,
        "mandatory": false,
        "description": ""
      },
      {
        "name": "v3",
        "type": null,
        "mandatory": false,
        "description": ""
      }
    ],
    "outputs": [
      {
        "name": "newString",
        "type": null,
        "mandatory": false,
        "description": ""
      }
    ],
    "widgets": [
      {
        "type": "text",
        "name": "v4",
        "default": "",
        "values": []
      },
      {
        "type": "text",
        "name": "v5",
        "default": "",
        "values": []
      },
      {
        "type": "text",
        "name": "template",
        "default": "${v1} ${v2} ${v3} ${v4}",
        "values": []
      }
    ],
    "function": {
      "ref": "fn.doc",
      "code": null
    }
  },
  {
    "functionName": "multicast",
    "blockName": "multicast",
    "title": "Change property type",
    "library": "Transform",
    "description": "Changes the data type of an input field",
    "inputs": [
      {
        "name": "v1",
        "type": null,
        "mandatory": false,
        "description": ""
      },
      {
        "name": "v2",
        "type": null,
        "mandatory": false,
        "description": ""
      },
      {
        "name": "v3",
        "type": null,
        "mandatory": false,
        "description": ""
      },
      {
        "name": "v4",
        "type": null,
        "mandatory": false,
        "description": ""
      }
    ],
    "outputs": [
      {
        "name": "v1",
        "type": null,
        "mandatory": false,
        "description": ""
      },
      {
        "name": "v2",
        "type": null,
        "mandatory": false,
        "description": ""
      },
      {
        "name": "v3",
        "type": null,
        "mandatory": false,
        "description": ""
      },
      {
        "name": "v4",
        "type": null,
        "mandatory": false,
        "description": ""
      }
    ],
    "widgets": [
      {
        "type": "combo",
        "name": "type1",
        "default": "string",
        "values": [
          "string",
          "int",
          "float"
        ]
      },
      {
        "type": "combo",
        "name": "type2",
        "default": "string",
        "values": [
          "string",
          "int",
          "float"
        ]
      },
      {
        "type": "combo",
        "name": "type3",
        "default": "string",
        "values": [
          "string",
          "int",
          "float"
        ]
      },
      {
        "type": "combo",
        "name": "type4",
        "default": "string",
        "values": [
          "string",
          "int",
          "float"
        ]
      }
    ],
    "function": {
      "ref": "fn.doc",
      "code": null
    }
  },
  {
    "functionName": "GeoReproject",
    "blockName": "GeoReproject",
    "library": "Transform",
    "title": "Re-project geo coordinates",
    "description": "Converts geo coordinates from one system to another",
    "inputs": [
      {
        "name": "srcCoordinateSystem",
        "type": "xs:string",
        "mandatory": true,
        "description": "Source coordinate system"
      },
      {
        "name": "targetCoordinateSystem",
        "type": "xs:string",
        "mandatory": true,
        "description": "Target coordinate system"
      },
      {
        "name": "strWKT",
        "type": "xs:string",
        "mandatory": true,
        "description": "Geo shape"
      }
    ],
    "outputs": [
      {
        "name": "strWKT",
        "type": "node",
        "description": "Converted geo shape"
      }
    ],
    "function": {
      "ref": "fn.doc",
      "code": null
    }
  },
  {
    "functionName": "fn_doc",
    "blockName": "doc",
    "title": "Document by URI",
    "library": "Query",
    "description": "Loads a document by URI",
    "inputs": [
      {
        "name": "uri",
        "type": "xs:string"
      }
    ],
    "outputs": [
      {
        "name": "doc",
        "type": "node"
      }
    ],
    "function": {
      "ref": "fn.doc",
      "code": null
    }
  },
  {
    "functionName": "fn_baseUri",
    "blockName": "baseUri",
    "title": "fn.baseUri",
    "description": "Returns the URI of a document node",
    "library": "Advanced",
    "inputs": [
      {
        "name": "node",
        "type": "node"
      }
    ],
    "outputs": [
      {
        "name": "uri",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": "fn.baseUri",
      "code": null
    }
  },
  {
    "functionName": "fn_head",
    "blockName": "head",
    "title": "fn.head",
    "description": "fn.head",
    "library": "Advanced",
    "inputs": [
      {
        "name": "nodes",
        "type": null
      }
    ],
    "outputs": [
      {
        "name": "node",
        "type": null
      }
    ],
    "function": {
      "ref": "fn.head",
      "code": null
    }
  },
  {
    "functionName": "FormatDate",
    "blockName": "FormatDate",
    "title": "Format Date",
    "library": "Format",
    "description": "Formats an date to ISO format using the provided format",
    "inputs": [
      {
        "name": "inputDate",
        "type": "xs:string"
      }
    ],
    "widgets": [
      {
        "type": "text",
        "name": "format",
        "default": "DD/MM/YYYY",
        "values": []
      }
    ],
    "outputs": [
      {
        "name": "IsoDate",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }
  },
  {
    "functionName": "CreateTriple",
    "blockName": "CreateTriple",
    "title": "Create Triples",
    "library": "Enrich",
    "description": "Creates a triple from the provided subject, predicate, object",
    "inputs": [
      {
        "name": "subject",
        "type": "xs:string"
      },
      {
        "name": "object",
        "type": "xs:string"
      }
    ],
    "widgets": [
      {
        "type": "toggle",
        "name": "subjectIsIRI",
        "default": true,
        "values": []
      },
      {
        "type": "text",
        "name": "predicate",
        "default": "myPredicate",
        "values": []
      },
      {
        "type": "toggle",
        "name": "objectIsIRI",
        "default": true,
        "values": []
      }
    ],
    "outputs": [
      {
        "name": "triple",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }
  },
  {
    "functionName": "Split",
    "blockName": "Split",
    "title": "Split String",
    "library": "Split",
    "description": "Splits a string using a specified character",
    "inputs": [
      {
        "name": "string",
        "type": null
      }
    ],
    "widgets": [
      {
        "type": "text",
        "name": "splitChar",
        "default": "/",
        "values": []
      }
    ],
    "outputs": [
      {
        "name": "v1",
        "type": null
      },
      {
        "name": "v2",
        "type": null
      },
      {
        "name": "v3",
        "type": null
      },
      {
        "name": "array",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "FormatDateAuto",
    "blockName": "FormatDateAuto",
    "title": "Auto-format Date",
    "library": "Format",
    "description": "Formats a date to ISO format using MM-DD-YYYY, YYYY-MM-DD, DD/MM/YYYY",
    "inputs": [
      {
        "name": "inputDate",
        "type": "xs:string"
      }
    ],
    "outputs": [
      {
        "name": "IsoDate",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "LookupByValue",
    "blockName": "LookupByValue",
    "library": "Query",
    "title": "Lookup by Value",
    "description": "Returns data from documents matching a collection and property value",
    "events": {
      "onConfigure": "console.debug('Lookup block onConfigure event: '+ JSON.stringify(node) + ' widgets.length=' + this.widgets.length + ' inputs:' + this.inputs.length + ' outputs:' + this.outputs.length + ', v:' + this.widgets[0].value);let v = this.widgets[0].value;if (this.widgets.length == (parseInt(v) + 5)) return; this.widgets=this.widgets.slice(0,5);for (let x=0;x < v ;x++) {this.addWidget(\"text\", \"value\" + x + \"Path\" , this.widgets_values[x+5], function (v) {})};return;"
    },
    "inputs": [
      {
        "name": "var1",
        "type": null
      }
    ],
    "properties": [],
    "widgets": [
      {
        "type": "text",
        "name": "nbOutputValues",
        "default": "1",
        "values": "1",
        "callback": "let nb = this.outputs.length;let vInt = parseInt(v);if (vInt < nb) {for (let i=0;i<(nb - vInt);i++){this.removeOutput(this.outputs.length-1);this.widgets.pop()}}else if (vInt > nb) { this.widgets=this.widgets.slice(0,5 + nb);for(let i=nb;i<vInt;i++) {this.addOutput('value' + i,null);this.addWidget(\"text\", \"value\" + i + \"Path\" , '', function (v) {})};}"
      },
      {
        "type": "combo",
        "name": "database",
        "default": "#DATABASES#",
        "values": []
      },
      {
        "type": "text",
        "name": "collection",
        "default": "",
        "values": []
      },
      {
        "type": "text",
        "name": "property",
        "default": "",
        "values": []
      },
      {
        "type": "combo",
        "name": "dataType",
        "default": "string",
        "values": [
          "string",
          "number",
          "bool"
        ]
      },
      {
        "type": "text",
        "name": "value0Path",
        "default": "/path/to/value/string()",
        "values": []
      }
    ],
    "outputs": [
      {
        "name": "value0",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "EvalJavaScript",
    "blockName": "EvalJavaScript",
    "title": "Execute Javascript",
    "description": "Executes an adhoc Javascript block",
    "library": "Advanced",
    "events": {
      "beforePropSave": "var result=true; const regex = /(xdmp\\.(eval|invoke|documentInsert|xqueryEval|xsltEval))/g;const found = v.match(regex);if (found == null) {result=true} else {validation.message='Possible code injection ('+regex+')';result=false};return result"
    },
    "inputs": [
      {
        "name": "var1",
        "type": null
      },
      {
        "name": "var2",
        "type": null
      },
      {
        "name": "var3",
        "type": null
      },
      {
        "name": "var4",
        "type": null
      },
      {
        "name": "var5",
        "type": null
      }
    ],
    "properties": [
      {
        "name": "sjsCode",
        "type": "if ( Number(var1) > 100 ) 'BIG'; else 'SMALL';"
      },
      {
        "name": "editProp",
        "type": "sjsCode"
      },
      {
        "name": "editWindowTitle",
        "type": "Edit JavaScript"
      }
    ],
    "widgets": [],
    "outputs": [
      {
        "name": "output",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "ExpertQueryBuilder",
    "blockName": "ExpertQueryBuilder",
    "title": "Lookup by Query",
    "description": "Build your own query using the query builder",
    "library": "Query",
    "inputs": [
      {
        "name": "v0",
        "type": null
      }
    ],
    "properties": [
      {
        "name": "queryBuilder",
        "type": {
          "logicalOperator": "all",
          "children": []
        }
      },
      {
        "name": "hoverText",
        "type": "Double click block to use the query builder"
      }
    ],
    "widgets": [
      {
        "type": "text",
        "name": "nbInputs",
        "default": "1",
        "values": [],
        "callback": "let nb = this.inputs.length;for(let i=0;i<nb;i++) {this.removeInput(0);};for(let i=0;i<parseInt(v);i++) this.addInput('v' + i,null);"
      },
      {
        "type": "combo",
        "name": "database",
        "default": "#DATABASES#",
        "values": [],
        "callback": "this.properties.queryBuilder.selectedDB.label=this.widgets[1].value"
      }
    ],
    "outputs": [
      {
        "name": "documents",
        "type": null
      },
      {
        "name": "ctsQuery",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "EpochToDateTime",
    "blockName": "EpochToDateTime",
    "title": "Epoch to dateTime",
    "library": "Format",
    "description": "Converts an Epoch number to a dateTime string",
    "inputs": [
      {
        "name": "epoch",
        "type": "xs:string"
      }
    ],
    "outputs": [
      {
        "name": "IsoDateTime",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }
  },
  {
    "functionName": "FormatDateTimeAuto",
    "blockName": "FormatDateTimeAuto",
    "title": "Format Date(predfined format)",
    "library": "Format",
    "description": "Formats a datetime to ISO format using predefined formats",
    "inputs": [
      {
        "name": "inputDateTime",
        "type": "xs:string"
      }
    ],
    "outputs": [
      {
        "name": "IsoDateTime",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }
  },
  {
    "functionName": "NormalizeSpace",
    "blockName": "NormalizeSpace",
    "title": "Normalize Space",
    "description": "Trims a string and reduces extra spaces to one",
    "library": "Clean",
    "inputs": [
      {
        "name": "value",
        "type": "xs:string"
      }
    ],
    "outputs": [
      {
        "name": "nsValue",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }
  },
  {
    "functionName": "RegExReplace",
    "blockName": "RegExReplace",
    "title": "Regex Replace",
    "description": "Allows replacement of a string using Regex",
    "library": "Transform",
    "inputs": [
      {
        "name": "input",
        "type": "xs:string"
      }
    ],
    "outputs": [
      {
        "name": "output",
        "type": "xs:string"
      }
    ],
    "widgets": [
      {
        "type": "text",
        "name": "regEx",
        "default": "",
        "values": []
      },
      {
        "type": "text",
        "name": "replace",
        "default": "",
        "values": []
      },
      {
        "type": "toggle",
        "name": "global",
        "default": true,
        "values": []
      },
      {
        "type": "toggle",
        "name": "caseInsensitive",
        "default": true,
        "values": []
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }
  },
  {
    "functionName": "fn_count",
    "blockName": "count",
    "library": "Advanced",
    "title": "fn.count",
    "description": "Counts the supplied elements",
    "inputs": [
      {
        "name": "list",
        "type": null
      }
    ],
    "outputs": [
      {
        "name": "nbItems",
        "type": "number"
      }
    ],
    "function": {
      "ref": "fn.count",
      "code": null
    }
  },
  {
    "functionName": "fn_stringJoin",
    "blockName": "String join",
    "library": "Join",
    "title": "String Join",
    "description": "Joins the elements of an array into a single string, using the separator character",
    "inputs": [
      {
        "name": "string*",
        "type": "xs:string*"
      }
    ],
    "properties": [
      {
        "name": "separator",
        "type": "xs:string"
      }
    ],
    "outputs": [
      {
        "name": "joinedString",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": "fn.stringJoin",
      "code": null
    }
  },
  {
    "functionName": "mapRangeValues",
    "blockName": "mapRangeValues",
    "title": "Map Range Values",
    "library": "Mapping",
    "description": "Maps an input from an range value to another using the given configuration (double click on block)",
    "inputs": [
      {
        "name": "value",
        "type": "number"
      },
      {
        "name": "default",
        "type": "number"
      }
    ],
    "properties": [
      {
        "name": "mappingRange",
        "type": [
          {
            "from": "1",
            "to": "3",
            "target": "100"
          },
          {
            "from": "4",
            "to": "6",
            "target": "#INPUT#"
          }
        ]
      },
      {
        "name": "hoverText",
        "type": "Double click block to edit the mapping rules"
      }
    ],
    "widgets": [
      {
        "type": "combo",
        "name": "castOutput",
        "default": "number",
        "values": [
          "number",
          "string",
          "bool"
        ]
      }
    ],
    "outputs": [
      {
        "name": "mappedValue",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "mapValues",
    "blockName": "Map values",
    "title": "Map Values",
    "library": "Mapping",
    "description": "Maps an input value to another using the configuration of the block (double click)",
    "inputs": [
      {
        "name": "value",
        "type": "xs:string"
      },
      {
        "name": "default",
        "type": "xs:string"
      }
    ],
    "properties": [
      {
        "name": "mapping",
        "type": [
          {
            "source": "#NULL#",
            "target": "#NULL#"
          },
          {
            "source": "#EMPTY#",
            "target": "#EMPTY#"
          }
        ]
      },
      {
        "name": "hoverText",
        "type": "Double click block to edit the mapping rules"
      }
    ],
    "widgets": [
      {
        "type": "combo",
        "name": "castOutput",
        "default": "string",
        "values": [
          "string",
          "bool"
        ]
      },
      {
        "type": "toggle",
        "name": "wildcarded",
        "default": false,
        "values": []
      }
    ],
    "outputs": [
      {
        "name": "mappedValue",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "JsonValidate",
    "blockName": "JsonValidate",
    "library": "Validate",
    "title": "Validate JSON",
    "description": "Validates input JSON according to the provided schema (URI) in schema DB",
    "inputs": [
      {
        "name": "node",
        "description": "Node to be validated",
        "type": null
      },
      {
        "name": "schema",
        "description": "URI of the json schema in the schema DB",
        "type": null
      }
    ],
    "outputs": [
      {
        "name": "results",
        "type": "node"
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }
  },
  {
    "functionName": "XMLValidate",
    "blockName": "XMLValidate",
    "title": "Validate XML",
    "library": "Validate",
    "description": "Validates XML documents based on a schema in schema DB",
    "inputs": [
      {
        "name": "node",
        "type": null
      }
    ],
    "outputs": [
      {
        "name": "results",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }
  },
  {
    "functionName": "applyXSLT",
    "blockName": "ApplyXSLT",
    "title": "Apply XSLT",
    "library": "Transform",
    "description": "Applies an XSLT transformation. Transformation can be a string or URI of a XSL document in the module databases",
    "inputs": [
      {
        "name": "node",
        "type": null
      },
      {
        "name": "xslStr",
        "type": null
      },
      {
        "name": "xslPath",
        "type": null
      }
    ],
    "outputs": [
      {
        "name": "doc",
        "type": "node"
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "addProperty",
    "blockName": "AddProperty",
    "title": "Add Property",
    "description": "Adds a field to a document",
    "library": "Enrich",
    "inputs": [
      {
        "name": "doc",
        "type": "node"
      },
      {
        "name": "value",
        "type": null
      }
    ],
    "properties": [
      {
        "name": "propertyName",
        "type": "Property name"
      }
    ],
    "outputs": [
      {
        "name": "doc",
        "type": "node"
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "array",
    "blockName": "Array",
    "title": "Generate Array",
    "library": "Join",
    "description": "Creates an array from individual inputs. If one of the inputs is itself an array then it will be flattened first",
    "events": {
      "onConfigure": "for(let i=this.inputs.length;i<parseInt(this.widgets[0].value);i++) this.addInput('item' + i,null);"
    },
    "inputs": [
      {
        "name": "item1",
        "type": null
      },
      {
        "name": "item2",
        "type": null
      },
      {
        "name": "item3",
        "type": null
      },
      {
        "name": "item4",
        "type": null
      },
      {
        "name": "item5",
        "type": null
      }
    ],
    "outputs": [
      {
        "name": "array",
        "type": null
      }
    ],
    "widgets": [
      {
        "type": "text",
        "name": "nbInputs",
        "default": "5",
        "values": [],
        "callback": "if (v<this.inputs.length) {this.widgets[0].value=this.inputs.length;} else { for(let i=this.inputs.length+1;i<parseInt(v)+1;i++) this.addInput('item' + i,null); }"
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "declarativeMapper",
    "blockName": "declarativeMapper",
    "library": "DHF",
    "title": "Declarative Mapper",
    "description": "Applies DHF Custom Mapping step to the input node",
    "inputs": [
      {
        "name": "node",
        "type": null
      }
    ],
    "widgets": [
      {
        "type": "text",
        "name": "MappingName",
        "default": "",
        "values": []
      },
      {
        "type": "text",
        "name": "MappingVersion",
        "default": "",
        "values": []
      },
      {
        "type": "toggle",
        "name": "WithInstanceRoot",
        "default": true,
        "values": []
      }
    ],
    "outputs": [
      {
        "name": "mappedNode",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "uuidString",
    "blockName": "uuid",
    "title": "Unique ID",
    "library": "Generate",
    "description": "Generates a unique ID string to use as a URI",
    "inputs": [],
    "widgets": [
      {
        "type": "text",
        "name": "prefix",
        "default": "/prefix/",
        "values": [],
        "description": "This value can be added as a prefix to the UUID"
      }
    ],
    "properties": [],
    "outputs": [
      {
        "name": "uuid",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "provo",
    "blockName": "PROV-O structure",
    "title": "PROV-O Structure",
    "library": "Enrich",
    "description": "Generates PROVO triples using the provided inputs",
    "inputs": [
      {
        "name": "uri",
        "type": null,
        "mandatory": true,
        "description": "URI of the source"
      },
      {
        "name": "DerivedFrom1",
        "type": null,
        "mandatory": false,
        "description": "Optional derived from URI"
      },
      {
        "name": "DerivedFrom2",
        "type": null,
        "mandatory": false,
        "description": "Optional derived from URI"
      },
      {
        "name": "DerivedFrom3",
        "type": null,
        "mandatory": false,
        "description": "Optional derived from URI"
      },
      {
        "name": "GeneratedBy",
        "type": null,
        "mandatory": false,
        "description": "Optional generated by URI"
      },
      {
        "name": "createdOn",
        "type": null,
        "mandatory": false,
        "description": "Optional date"
      }
    ],
    "properties": [],
    "outputs": [
      {
        "name": "PROV-O",
        "type": "node"
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "EntityEnrichment",
    "blockName": "EntityEnrichment",
    "title": "Entity Enrichment",
    "library": "Enrich",
    "description": "Performs entity enrichment on an input string using a dictionary",
    "inputs": [
      {
        "name": "string",
        "type": null,
        "mandatory": true,
        "description": "String to enrich"
      },
      {
        "name": "dictionary",
        "type": null,
        "mandatory": true,
        "description": "URI of a SKOS dictionary"
      }
    ],
    "properties": [],
    "outputs": [
      {
        "name": "enrichedString",
        "type": null,
        "description": "Enriched string"
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "Highlight",
    "blockName": "Highlight",
    "title": "Highlight String",
    "library": "Enrich",
    "description": "Applies the MarkLogic highlight function to a string",
    "inputs": [
      {
        "name": "string",
        "type": null
      },
      {
        "name": "query",
        "type": null
      },
      {
        "name": "highlightKeyword",
        "type": null
      }
    ],
    "properties": [],
    "outputs": [
      {
        "name": "enrichedString",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "DistinctValues",
    "blockName": "DistinctValues",
    "title": "Distinct Values",
    "library": "Filter",
    "description": "Returns the distinct values from an input array or sequence",
    "inputs": [
      {
        "name": "array",
        "type": null
      }
    ],
    "widgets": [
      {
        "type": "text",
        "name": "xpath",
        "default": "//prop",
        "values": []
      }
    ],
    "properties": [],
    "outputs": [
      {
        "name": "distinctValues",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "selectCase",
    "blockName": "selectCase",
    "title": "Select Case",
    "library": "Mapping",
    "description": "Returns a value based on the value2Test input. Double click the block to configure the test",
    "inputs": [
      {
        "name": "value2Test",
        "type": null
      },
      {
        "name": "default",
        "type": null
      },
      {
        "name": "input0",
        "type": null
      },
      {
        "name": "input1",
        "type": null
      },
      {
        "name": "input2",
        "type": null
      }
    ],
    "properties": [
      {
        "name": "mappingCase",
        "type": [
          {
            "value": "V0",
            "input": "0"
          },
          {
            "value": "V1",
            "input": "1"
          },
          {
            "value": "V2",
            "input": "2"
          }
        ]
      },
      {
        "name": "hoverText",
        "type": "Double click block to edit the Case rules"
      }
    ],
    "widgets": [
      {
        "type": "text",
        "name": "nbInputs",
        "default": "3",
        "values": [],
        "callback": "let nb=this.inputs.length;let vInt=parseInt(v);if(vInt < 1)return;if (vInt < (nb-2)){for (let i=0;i<(nb-2 - vInt);i++){this.removeInput(this.inputs.length-1)}this.properties.mappingCase=this.properties.mappingCase.slice(0,vInt)} else if (vInt > (nb-2)){ for (var i=nb-2;i<(vInt);i++) {this.addInput('input' + i,null);this.properties.mappingCase.push({'value':'V'+i,'input':i})}}"
      }
    ],
    "outputs": [
      {
        "name": "MappedCase",
        "type": "node"
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "CheckPhoneNumber",
    "blockName": "CheckPhoneNumber",
    "title": "Validate Phone Number",
    "library": "Validate",
    "description": "Checks a phone number. Returns the re-formatted number and validation status",
    "inputs": [
      {
        "name": "phoneNumber",
        "type": null,
        "mandatory": true
      },
      {
        "name": "countryISO2",
        "type": null,
        "mandatory": true
      },
      {
        "name": "Uri",
        "type": null
      }
    ],
    "properties": [],
    "widgets": [
      {
        "type": "combo",
        "name": "outputFormat",
        "default": "INTERNATIONAL",
        "values": [
          "NATIONAL",
          "INTERNATIONAL",
          "E164"
        ]
      },
      {
        "type": "text",
        "name": "defaultCountry",
        "default": "FR",
        "values": null
      },
      {
        "type": "toggle",
        "name": "Output if invalid ?",
        "default": true,
        "values": null
      }
    ],
    "outputs": [
      {
        "name": "phoneNumber",
        "type": null
      },
      {
        "name": "countryCode",
        "type": null
      },
      {
        "name": "numberType",
        "type": null
      },
      {
        "name": "qualityResult",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "document_xpath",
    "blockName": "xpath",
    "library": "Transform",
    "title": "Apply Xpath",
    "description": "Returns values from a document based on an XPath expression",
    "height": 180,
    "width": 230,
    "inputs": [
      {
        "name": "node",
        "type": "nodes"
      }
    ],
    "widgets": [
      {
        "type": "text",
        "name": "xpath",
        "default": "",
        "description": "",
        "values": []
      },
      {
        "type": "text",
        "name": "namespaces",
        "default": "",
        "description": "",
        "values": []
      }
    ],
    "outputs": [
      {
        "name": "nodes",
        "type": "nodes"
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }
  }
]